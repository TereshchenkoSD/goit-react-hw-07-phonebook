{"version":3,"sources":["redux/selectors/contactsSelectors.js","redux/actions/contacts.js","service/phonebook-api.js","components/Form/Form.styles.jsx","components/Form/Form.jsx","redux/operations/contactsOperations.js","components/ContactList/ContactList.styles.jsx","components/Contact/Contact.styles.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styles.jsx","components/Filter/Filter.jsx","components/Title/Title.styles.jsx","components/Title/Title.jsx","App.styles.jsx","App.js","redux/reducers/contacts.js","redux/store/index.js","index.js"],"names":["getFilter","state","contacts","filter","getContacts","items","selectors","isLoading","loading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","changeFilter","createAction","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","axios","defaults","baseURL","fetchContacts","a","get","data","addContact","post","deleteContact","id","delete","Form","styled","form","Label","label","Input","input","Button","button","ContactForm","useState","setName","number","setNumber","dispatch","useDispatch","useSelector","handleInputChange","e","currentTarget","value","formReset","onSubmit","preventDefault","find","toast","newContact","contactsActions","phoneBookApi","addedContact","operations","type","pattern","title","required","onChange","List","ul","ContactListItem","li","ContactButton","Contact","onDeleteContact","onClick","ContactList","deletedContact","useEffect","map","FilterLabel","FilterInput","Filter","actions","target","Heading","h2","Title","text","FormContainer","div","App","position","createReducer","_","payload","error","action","combineReducers","store","configureStore","reducer","contactsReducer","devTools","process","middleware","getDefaultMiddleware","logger","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.ab0c054b.chunk.js","sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getContacts = state => state.contacts.items;\r\n\r\nconst isLoading = state => state.contacts.loading;\r\n\r\n// const getVisibleContacts = state => {\r\n//   const filter = getFilter(state);\r\n//   const contacts = getContacts(state);\r\n\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//   const visibleContacts = contacts.filter(contact =>\r\n//     contact.name.toLowerCase().includes(normalizedFilter),\r\n//   );\r\n\r\n//   return { contacts: visibleContacts };\r\n// };\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    const visibleContacts = contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n\r\n    return visibleContacts;\r\n  },\r\n);\r\n\r\nconst selectors = {\r\n  getFilter,\r\n  getContacts,\r\n  isLoading,\r\n  getVisibleContacts,\r\n};\r\n\r\nexport default selectors;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\n// import { nanoid } from 'nanoid';\r\n\r\n// export const addContact = createAction('contacts/Add', (name, number) => {\r\n//   return {\r\n//     payload: {\r\n//       id: nanoid(),\r\n//       name,\r\n//       number,\r\n//     },\r\n//   };\r\n// });\r\n\r\n// export const deleteContact = createAction('contacts/Delete');\r\n\r\nexport const changeFilter = createAction('items/Change');\r\n\r\n// API interaction\r\n\r\n// fetchContacts\r\n\r\n// pending\r\n\r\nexport const fetchContactsRequest = createAction(\r\n  'contacts/fetchContactsRequest',\r\n);\r\n\r\n// fulfilled\r\n\r\nexport const fetchContactsSuccess = createAction(\r\n  'contacts/fetchContactsSuccess',\r\n);\r\n\r\n// rejected\r\n\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\n// addContacts\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\n\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\n\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\n// deleteContacts\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\n\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\n\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n","import axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'https://611cb128a18e850017decb95.mockapi.io/api/v2';\r\n\r\nexport const fetchContacts = async () => {\r\n  const { data } = await axios.get(`/contacts`);\r\n\r\n  return data;\r\n};\r\n\r\nexport const addContact = async contact => {\r\n  const { data } = await axios.post(`/contacts`, contact);\r\n  return data;\r\n};\r\n\r\nexport const deleteContact = async id => {\r\n  await axios.delete(`/contacts/${id}`);\r\n  return id;\r\n};\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Form = styled.form`\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-width: 400px;\r\n  margin-bottom: 15px;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  height: 30px;\r\n\r\n  border-radius: 4px;\r\n\r\n  border: 2px solid lightblue;\r\n\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  line-height: 1.875;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  min-width: 200px;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n\r\n  color: rgba(33, 33, 33, 1);\r\n  background-color: rgba(156, 156, 156, 1);\r\n\r\n  font-size: 16px;\r\n  font-weight: 700;\r\n  line-height: 1.875;\r\n  letter-spacing: 0.06em;\r\n\r\n  transition-property: color, background-color, box-shadow;\r\n  transition-duration: 250ms;\r\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\r\n\r\n  &:hover,\r\n  &:focus {\r\n    color: rgba(245, 244, 250, 1);\r\n    background-color: rgba(33, 150, 243, 1);\r\n    box-shadow: 0px 3px 1px rgba(0, 0, 0, 0.1), 0px 1px 2px rgba(0, 0, 0, 0.08),\r\n      0px 2px 2px rgba(0, 0, 0, 0.12);\r\n  }\r\n\r\n  & svg {\r\n    height: 24px;\r\n    width: 24px;\r\n    margin-right: 5px;\r\n  }\r\n`;\r\n","import { useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { CgUserAdd } from 'react-icons/cg';\n\nimport toast from 'react-hot-toast';\n\n// import { addContact } from '../../redux/actions/contacts';\n\nimport selectors from '../../redux/selectors/contactsSelectors';\n\nimport * as operations from '../../redux/operations/contactsOperations';\n\nimport { Form, Label, Input, Button } from './Form.styles';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectors.getContacts);\n\n  const handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      toast(`${name} is already in the contact list`);\n      return;\n    }\n    dispatch(operations.addContact(name, number));\n\n    formReset();\n  };\n\n  const formReset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label>\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={handleInputChange}\n        />\n      </Label>\n      <Label>\n        Number\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          value={number}\n          onChange={handleInputChange}\n        />\n      </Label>\n      <Button type=\"submit\">\n        <CgUserAdd />\n        Add contact\n      </Button>\n    </Form>\n  );\n};\n\n// const mapDispatchToProps = dispatch => ({\n//   onSubmit: (name, number) => dispatch(addContact(name, number)),\n// });\n\n// export default connect(null, mapDispatchToProps)(ContactForm);\n\nexport default ContactForm;\n\n// export default class ContactForm extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   nameInputId = uuidv4();\n\n//   handleInputChange = e => {\n//     const { name, value } = e.currentTarget;\n//     this.setState({ [name]: value });\n//   };\n\n//   handleSubmit = e => {\n//     e.preventDefault();\n\n//     this.props.onSubmit(this.state);\n\n//     this.formReset();\n//   };\n\n//   formReset = () => {\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n//     return (\n//       <Form onSubmit={this.handleSubmit}>\n//         <Label>\n//           Name\n//           <Input\n//             type=\"text\"\n//             name=\"name\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             required\n//             value={name}\n//             onChange={this.handleInputChange}\n//           />\n//         </Label>\n//         <Label>\n//           Number\n//           <Input\n//             type=\"tel\"\n//             name=\"number\"\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//             value={number}\n//             onChange={this.handleInputChange}\n//           />\n//         </Label>\n//         <Button type=\"submit\">\n//           <CgUserAdd />\n//           Add contact\n//         </Button>\n//       </Form>\n//     );\n//   }\n// }\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func,\n};\n","import * as contactsActions from '../actions/contacts';\r\nimport * as phoneBookApi from '../../service/phonebook-api';\r\n\r\nexport const fetchContacts = () => async dispatch => {\r\n  dispatch(contactsActions.fetchContactsRequest());\r\n\r\n  try {\r\n    const contacts = await phoneBookApi.fetchContacts();\r\n    dispatch(contactsActions.fetchContactsSuccess(contacts));\r\n  } catch (error) {\r\n    dispatch(contactsActions.fetchContactsError(error));\r\n  }\r\n};\r\n\r\nexport const addContact = (name, number) => async dispatch => {\r\n  const newContact = {\r\n    name,\r\n    number,\r\n  };\r\n\r\n  dispatch(contactsActions.addContactRequest());\r\n\r\n  try {\r\n    const addedContact = await phoneBookApi.addContact(newContact);\r\n    dispatch(contactsActions.addContactSuccess(addedContact));\r\n  } catch (error) {\r\n    dispatch(contactsActions.addContactError(error));\r\n  }\r\n};\r\n\r\nexport const deleteContact = id => async dispatch => {\r\n  dispatch(contactsActions.deleteContactRequest());\r\n\r\n  try {\r\n    const deletedContact = await phoneBookApi.deleteContact(id);\r\n    dispatch(contactsActions.deleteContactSuccess(deletedContact));\r\n  } catch (error) {\r\n    dispatch(contactsActions.deleteContactError(error));\r\n  }\r\n};\r\n","import styled from '@emotion/styled';\r\n\r\nexport const List = styled.ul`\r\n  width: 100%;\r\n  max-width: 400px;\r\n`;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ContactListItem = styled.li`\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nexport const ContactButton = styled.button`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  min-width: 150px;\r\n  padding-top: 2px;\r\n  padding-bottom: 2px;\r\n\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n\r\n  color: rgba(33, 33, 33, 1);\r\n  background-color: rgba(156, 156, 156, 1);\r\n\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  line-height: 1.875;\r\n  letter-spacing: 0.06em;\r\n\r\n  transition-property: color, background-color, box-shadow;\r\n  transition-duration: 250ms;\r\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\r\n\r\n  &:hover,\r\n  &:focus {\r\n    color: rgba(245, 244, 250, 1);\r\n    background-color: rgba(33, 150, 243, 1);\r\n    box-shadow: 0px 3px 1px rgba(0, 0, 0, 0.1), 0px 1px 2px rgba(0, 0, 0, 0.08),\r\n      0px 2px 2px rgba(0, 0, 0, 0.12);\r\n  }\r\n\r\n  & svg {\r\n    height: 18px;\r\n    width: 18px;\r\n    margin-right: 5px;\r\n  }\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { BsTrash } from 'react-icons/bs';\r\n\r\nimport { ContactListItem, ContactButton } from './Contact.styles';\r\n\r\nconst Contact = ({ id, name, number, onDeleteContact }) => {\r\n  return (\r\n    <ContactListItem key={id}>\r\n      {name}: {number}\r\n      <ContactButton type=\"button\" onClick={() => onDeleteContact(id)}>\r\n        <BsTrash />\r\n        Delete\r\n      </ContactButton>\r\n    </ContactListItem>\r\n  );\r\n};\r\n\r\nContact.propTypes = {\r\n  id: PropTypes.string,\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Contact;\r\n","import PropTypes from 'prop-types';\r\n\r\nimport { useEffect } from 'react';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport selectors from '../../redux/selectors/contactsSelectors';\r\n\r\nimport { List } from './ContactList.styles';\r\n\r\nimport Contact from '../Contact';\r\n\r\nimport * as operations from '../../redux/operations/contactsOperations';\r\n\r\nconst ContactList = () => {\r\n  const contacts = useSelector(selectors.getVisibleContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const onDeleteContact = id => {\r\n    dispatch(operations.deleteContact(id));\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(operations.fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <List>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <Contact\r\n          key={id}\r\n          id={id}\r\n          name={name}\r\n          number={number}\r\n          onDeleteContact={() => onDeleteContact(id)}\r\n        />\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\n// const mapStateToProps = state => {\r\n//   const { filter, contacts } = state;\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//   const visibleContacts = contacts.filter(contact =>\r\n//     contact.name.toLowerCase().includes(normalizedFilter),\r\n//   );\r\n\r\n//   return { contacts: visibleContacts };\r\n// };\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onDeleteContact: id => dispatch(deleteContact(id)),\r\n// });\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string,\r\n      name: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }),\r\n  ),\r\n\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\nexport default ContactList;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const FilterLabel = styled.label`\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-width: 400px;\r\n  margin-bottom: 15px;\r\n`;\r\n\r\nexport const FilterInput = styled.input`\r\n  height: 30px;\r\n\r\n  border-radius: 4px;\r\n\r\n  border: 2px solid lightblue;\r\n\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  line-height: 1.875;\r\n`;\r\n","// import PropTypes from 'prop-types';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport selectors from '../../redux/selectors/contactsSelectors';\r\n\r\nimport * as actions from '../../redux/actions/contacts';\r\n\r\nimport { FilterLabel, FilterInput } from './Filter.styles';\r\n\r\nconst Filter = () => {\r\n  const value = useSelector(selectors.getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  const onChange = e => dispatch(actions.changeFilter(e.target.value));\r\n\r\n  return (\r\n    <FilterLabel>\r\n      Find contacts by name\r\n      <FilterInput type=\"text\" value={value} onChange={onChange}></FilterInput>\r\n    </FilterLabel>\r\n  );\r\n};\r\n\r\n// Filter.propTypes = {\r\n//   value: PropTypes.string,\r\n//   onChange: PropTypes.func,\r\n// };\r\n\r\nexport default Filter;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Heading = styled.h2`\r\n  margin-bottom: 10px;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { Heading } from './Title.styles';\r\n\r\nconst Title = ({ text }) => {\r\n  return <Heading>{text}</Heading>;\r\n};\r\n\r\nTitle.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Title;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const FormContainer = styled.div`\r\n  width: 100%;\r\n  max-width: 500px;\r\n  height: auto;\r\n\r\n  padding: 10px 20px;\r\n  margin: 10px auto;\r\n\r\n  box-shadow: 0px 3px 1px rgba(0, 0, 0, 0.1), 0px 1px 2px rgba(0, 0, 0, 0.08),\r\n    0px 2px 2px rgba(0, 0, 0, 0.12);\r\n`;\r\n","// import { useState, useEffect } from 'react';\n// import { v4 as uuidv4 } from 'uuid';\n\nimport { Toaster } from 'react-hot-toast';\n\nimport ContactForm from './components/Form';\n\nimport ContactList from './components/ContactList';\n\nimport Filter from './components/Filter';\n\nimport Title from './components/Title';\n\n// import initialContacts from './data/contacts.json';\n\nimport { FormContainer } from './App.styles';\n\nexport const App = () => {\n  // const [contacts, setContacts] = useState([]);\n  // const [filter, setFilter] = useState('');\n\n  // const addContact = (name, number) => {\n  //   if (\n  //     contacts.find(\n  //       contact => contact.name.toLowerCase() === name.toLowerCase(),\n  //     )\n  //   ) {\n  //     alert(`${name} is already in the contact list`);\n  //     return;\n  //   }\n  //   const contact = {\n  //     id: uuidv4(),\n  //     name,\n  //     number,\n  //   };\n\n  //   setContacts(contacts => [contact, ...contacts]);\n  // };\n\n  // useEffect(() => {\n  //   const savedContacts = localStorage.getItem('contacts');\n\n  //   const parsedContacts = JSON.parse(savedContacts);\n\n  //   if (parsedContacts) {\n  //     setContacts(parsedContacts);\n  //   }\n  // }, []);\n\n  // useEffect(() => {\n  //   localStorage.setItem('contacts', JSON.stringify(contacts));\n  // }, [contacts]);\n\n  // const deleteContact = contactId => {\n  //   setContacts(contacts.filter(contact => contact.id !== contactId));\n  // };\n\n  // const changeFilter = e => {\n  //   setFilter(e.currentTarget.value);\n  // };\n\n  // const getVisibleContacts = () => {\n  //   const normalizedFilter = filter.toLowerCase();\n\n  //   return contacts.filter(contact =>\n  //     contact.name.toLowerCase().includes(normalizedFilter),\n  //   );\n  // };\n\n  return (\n    <FormContainer>\n      <Title text={'Phonebook'} />\n      <ContactForm />\n      <Title text={'Contacts'} />\n      <Filter />\n      <ContactList />\n      <Toaster position=\"top-center\" />\n    </FormContainer>\n  );\n};\n\nexport default App;\n","import { combineReducers, createReducer } from '@reduxjs/toolkit';\r\nimport * as contactsActions from '../actions/contacts';\r\n\r\n// import { addContact, deleteContact, changeFilter } from '../actions/contacts';\r\n\r\n// export const contactsReducer = createReducer([], {\r\n//   [addContact]: (state, { payload }) => [...state, payload],\r\n//   [deleteContact]: (state, { payload }) =>\r\n//     state.filter(contact => contact.id !== payload),\r\n// });\r\n\r\n// export const filterReducer = createReducer('', {\r\n//   [changeFilter]: (_, { payload }) => payload,\r\n// });\r\n\r\nconst items = createReducer([], {\r\n  [contactsActions.fetchContactsSuccess]: (_, actions) => actions.payload,\r\n  [contactsActions.addContactSuccess]: (state, actions) => [\r\n    ...state,\r\n    actions.payload,\r\n  ],\r\n  [contactsActions.deleteContactSuccess]: (state, actions) =>\r\n    state.filter(({ id }) => id !== actions.payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [contactsActions.addContactRequest]: () => true,\r\n  [contactsActions.addContactSuccess]: () => false,\r\n  [contactsActions.addContactError]: () => false,\r\n  [contactsActions.deleteContactRequest]: () => true,\r\n  [contactsActions.deleteContactSuccess]: () => false,\r\n  [contactsActions.deleteContactError]: () => false,\r\n  [contactsActions.fetchContactsRequest]: () => true,\r\n  [contactsActions.fetchContactsSuccess]: () => false,\r\n  [contactsActions.fetchContactsError]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [contactsActions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst error = createReducer(null, {\r\n  [contactsActions.fetchContactsError]: (_, action) => action.payload,\r\n  [contactsActions.fetchContactsRequest]: () => null,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  loading,\r\n  error,\r\n  filter,\r\n});\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\n// import {\r\n//   persistStore,\r\n//   persistReducer,\r\n//   FLUSH,\r\n//   REHYDRATE,\r\n//   PAUSE,\r\n//   PERSIST,\r\n//   PURGE,\r\n//   REGISTER,\r\n// } from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from '../reducers/contacts';\r\n\r\n// const persistConfig = {\r\n//   key: 'contacts',\r\n//   storage,\r\n//   blacklist: ['filter'],\r\n// };\r\n\r\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\n// const store = configureStore({\r\n//   reducer: rootReducer,\r\n//   devTools: process.env.NODE_ENV === 'development',\r\n//   middleware: getDefaultMiddleware =>\r\n//     getDefaultMiddleware({\r\n//       serializableCheck: {\r\n//         ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n//       },\r\n//     }).concat(logger),\r\n// });\r\n\r\nconst store = configureStore({\r\n  reducer: { contacts: contactsReducer },\r\n  devTools: process.env.NODE_ENV === 'development',\r\n  middleware: getDefaultMiddleware => [...getDefaultMiddleware(), logger],\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\n// const storeObject = { store, persistor };\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n// import { PersistGate } from 'redux-persist/integration/react';\r\nimport App from './App';\r\nimport store from './redux/store';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    {/* <PersistGate loading={null} persistor={storeObject.persistor}> */}\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n    {/* </PersistGate> */}\r\n  </React.StrictMode>,\r\n  document.querySelector('#root'),\r\n);\r\n"],"sourceRoot":""}